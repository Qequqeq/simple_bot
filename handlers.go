package main

import (
	"fmt"
	"strings"

	"github.com/mymmrac/telego"
	th "github.com/mymmrac/telego/telegohandler"
	tu "github.com/mymmrac/telego/telegoutil"
)

func setupHandlers(bh *th.BotHandler) {
	bh.Handle(startHandler, th.CommandEqual("start"))
	bh.Handle(callbackHandler, th.AnyCallbackQuery())
	bh.Handle(messageHandler)
}

func startHandler(bot *telego.Bot, update telego.Update) {
	chatID := update.Message.Chat.ID

	userStates[chatID] = &UserState{Mode: "none"}
	userData[chatID] = &UserData{
		Expenses:    make(map[string]float64),
		Categories:  []string{},
		UsingCustom: false,
	}

	keyboard := tu.InlineKeyboard(
		tu.InlineKeyboardRow(
			tu.InlineKeyboardButton("üÜì –ö–∞—Å—Ç–æ–º–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏").WithCallbackData("free_mode"),
			tu.InlineKeyboardButton("üì¶ –ë–∞–∑–æ–≤—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏").WithCallbackData("basic_mode"),
		),
	)

	bot.SendMessage(tu.Message(
		tu.ID(chatID),
		"üëã–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é –í–∞—Å! \n\n üéÆ–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã:",
	).WithReplyMarkup(keyboard))
}

func callbackHandler(bot *telego.Bot, update telego.Update) {
	query := update.CallbackQuery
	if query == nil {
		return
	}

	chatID := query.Message.GetChat().ID
	data := query.Data

	_ = bot.AnswerCallbackQuery(&telego.AnswerCallbackQueryParams{
		CallbackQueryID: query.ID,
	})

	state := userStates[chatID]
	user := userData[chatID]

	if state == nil || user == nil {
		bot.SendMessage(tu.Message(tu.ID(chatID), "‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å –∫–æ–º–∞–Ω–¥—ã /start"))
		return
	}

	switch data {
	case "free_mode":
		handleFreeMode(bot, chatID)
	case "basic_mode":
		handleBasicMode(bot, chatID)
	case "finish_setup":
		handleFinishSetup(bot, chatID)
	case "add_category":
		handleAddCategory(bot, chatID)
	case "stats":
		showStats(bot, chatID)
	default:
		if strings.HasPrefix(data, "category_") {
			handleCategorySelection(bot, chatID, data)
		}
	}
}

func messageHandler(bot *telego.Bot, update telego.Update) {
	msg := update.Message
	if msg == nil {
		return
	}

	chatID := msg.Chat.ID
	state := userStates[chatID]
	user := userData[chatID]

	if state == nil || user == nil {
		bot.SendMessage(tu.Message(tu.ID(chatID), "‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å –∫–æ–º–∞–Ω–¥—ã /start"))
		return
	}

	if state.IsAddingAmount {
		handleAmountInput(bot, chatID, msg.Text)
		state.IsAddingAmount = false
		return
	}

	if state.Mode == "setup" && msg.Text != "" {
		addCategory(chatID, msg.Text)
		sendSetupKeyboard(bot, chatID, "‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞: "+msg.Text)
	}
}

func handleFreeMode(bot *telego.Bot, chatID int64) {
	userStates[chatID].Mode = "setup"
	userData[chatID].UsingCustom = true
	sendSetupKeyboard(bot, chatID, "‚úèÔ∏è –í–≤–æ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π. \n\nüÜó–ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ, –Ω–∞–∂–º–∏—Ç–µ '–ó–∞–≤–µ—Ä—à–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É'. \n\n‚ö†Ô∏è–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–Ω–µ—Å–∏—Ç–µ—Å—å –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ. \n\nüîí–ü–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π —É–¥–∞–ª–∏—Ç—å –µ–µ –±—É–¥–µ—Ç –Ω–µ–ª—å–∑—è!")
}

func handleBasicMode(bot *telego.Bot, chatID int64) {
	userStates[chatID].Mode = "basic"
	userData[chatID].Categories = append([]string{}, defaultCategories...)
	sendMainKeyboard(bot, chatID, "‚úÖ –í—ã–±—Ä–∞–Ω —Ä–µ–∂–∏–º –±–∞–∑–æ–≤—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π")
}

func handleFinishSetup(bot *telego.Bot, chatID int64) {
	if len(userData[chatID].Categories) == 0 {
		bot.SendMessage(tu.Message(tu.ID(chatID), "‚ùå –í—ã –¥–æ–ª–∂–Ω—ã –¥–æ–±–∞–≤–∏—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –∫–∞—Ç–µ–≥–æ—Ä–∏—é!"))
		return
	}

	userStates[chatID].Mode = "free"
	sendMainKeyboard(bot, chatID, "‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–ª—è—Ç—å —Ä–∞—Å—Ö–æ–¥—ã")
}

func handleAddCategory(bot *telego.Bot, chatID int64) {
	userStates[chatID].Mode = "setup"
	bot.SendMessage(tu.Message(tu.ID(chatID), "‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:"))
}

func handleCategorySelection(bot *telego.Bot, chatID int64, data string) {
	category := strings.TrimPrefix(data, "category_")
	userStates[chatID].TempCategory = category
	userStates[chatID].IsAddingAmount = true
	bot.SendMessage(tu.Message(
		tu.ID(chatID),
		fmt.Sprintf("üí∞ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ \"%s\": \n\n (–ï—Å–ª–∏ –í—ã –æ—à–∏–±–ª–∏—Å—å, –ø—Ä–æ—Å—Ç–æ –≤–≤–µ–¥–∏—Ç–µ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ)", category),
	))
}
